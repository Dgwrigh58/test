import os
import zipfile
import pytesseract
from PIL import Image
from cryptography.hazmat.primitives.ciphers import Cipher, algorithms, modes
from cryptography.hazmat.primitives import padding
from cryptography.hazmat.primitives.kdf.pbkdf2 import PBKDF2HMAC
from cryptography.hazmat.primitives import hashes
from cryptography.hazmat.backends import default_backend
from base64 import urlsafe_b64encode
import re
from ruamel.yaml import YAML
from ruamel.yaml.comments import CommentedMap

yaml = YAML()

def extract_zip(zip_path, extract_to):
    with zipfile.ZipFile(zip_path, 'r') as zip_ref:
        zip_ref.extractall(extract_to)
    print(f"Extracted {zip_path} to {extract_to}")

def extract_text_from_image(image_path):
    img = Image.open(image_path)
    text = pytesseract.image_to_string(img)
    return text.strip()

def extract_password_from_text(text):
    pattern = r"The following password has been used to protect the private key:\s*(\S+)\s*Please securely record the password."
    match = re.search(pattern, text)
    if match:
        return match.group(1)
    else:
        raise ValueError("Password not found in the text.")

def find_file_with_extension(directory, extensions):
    for root, _, files in os.walk(directory):
        for file in files:
            if file.endswith(extensions):
                return os.path.join(root, file)
    raise FileNotFoundError(f"No file with extensions {extensions} found in the directory.")

def find_file_with_suffix(directory, suffix):
    for root, _, files in os.walk(directory):
        for file in files:
            if file.endswith(suffix):
                return os.path.join(root, file)
    raise FileNotFoundError(f"No file ending with {suffix} found in the directory.")

def encrypt_vault_password(password, key, salt):
    # Derive a key from the key and salt using PBKDF2
    kdf = PBKDF2HMAC(
        algorithm=hashes.SHA256(),
        length=32,
        salt=salt,
        iterations=100000,
        backend=default_backend()
    )
    key = kdf.derive(key)

    # Pad the password to be a multiple of block size
    padder = padding.PKCS7(algorithms.AES.block_size).padder()
    padded_data = padder.update(password.encode()) + padder.finalize()

    # Encrypt the padded password
    iv = os.urandom(16)
    cipher = Cipher(algorithms.AES(key), modes.CFB(iv), backend=default_backend())
    encryptor = cipher.encryptor()
    encrypted_password = encryptor.update(padded_data) + encryptor.finalize()

    return f"$ANSIBLE_VAULT;1.1;AES256\n{urlsafe_b64encode(iv + encrypted_password).decode('utf-8')}"

def update_inventory_file(inventory_path, encrypted_password):
    with open(inventory_path, 'r') as file:
        inventory = yaml.load(file)

    # Update the cert_pass field in the inventory file
    if 'cert_pass' in inventory:
        vault_tag = CommentedMap()
        vault_tag.yaml_set_tag('!vault')
        vault_tag[''] = encrypted_password
        inventory['cert_pass'] = vault_tag
    else:
        raise KeyError("The 'cert_pass' field is missing in the inventory file.")

    with open(inventory_path, 'w') as file:
        yaml.dump(inventory, file)

def main():
    try:
        # Define the current directory
        current_dir = os.getcwd()

        # Automatically find the zip files
        nitm3_pw_zip_path = find_file_with_suffix(current_dir, '-PW.zip')
        
        # Find the normal zip file excluding the -PW.zip file
        zip_files = [f for f in os.listdir(current_dir) if f.endswith('.zip') and not f.endswith('-PW.zip')]
        if not zip_files:
            raise FileNotFoundError("No certificate zip file found.")
        nitm3_zip_path = os.path.join(current_dir, zip_files[0])

        # Confirm paths
        if not os.path.isfile(nitm3_zip_path):
            raise FileNotFoundError(f"Certificate zip file not found: {nitm3_zip_path}")
        if not os.path.isfile(nitm3_pw_zip_path):
            raise FileNotFoundError(f"Password zip file not found: {nitm3_pw_zip_path}")

        # Extract nitm3-pw.zip
        extract_zip(nitm3_pw_zip_path, current_dir)

        # Find the jpg file in the extracted directory
        jpg_file_path = find_file_with_extension(current_dir, ('.jpg', '.JPG'))
        print(f"Found JPG file: {jpg_file_path}")

        # Extract text from the jpg file
        text = extract_text_from_image(jpg_file_path)
        password = extract_password_from_text(text)
        print(f"Extracted Password: {password}")

        # Encrypt the password
        encryption_key = os.urandom(32)
        salt = os.urandom(16)
        encrypted_password = encrypt_vault_password(password, encryption_key, salt)
        print(f"Encrypted password: {encrypted_password}")

        # Update the inventory file with the encrypted password
        inventory_path = os.path.join(current_dir, 'inventory.yml')
        update_inventory_file(inventory_path, encrypted_password)

        print("The inventory file has been updated successfully.")

    except Exception as e:
        print(f"An error occurred: {e}")

if __name__ == "__main__":
    main()
