import os
import zipfile
import pytesseract
from PIL import Image
import subprocess

def extract_zip(zip_path, extract_to):
    with zipfile.ZipFile(zip_path, 'r') as zip_ref:
        zip_ref.extractall(extract_to)
    print(f"Extracted {zip_path} to {extract_to}")

def extract_text_from_image(image_path):
    img = Image.open(image_path)
    text = pytesseract.image_to_string(img)
    return text.strip()

def find_file_with_extension(directory, extensions):
    for root, _, files in os.walk(directory):
        for file in files:
            if file.endswith(extensions):
                return os.path.join(root, file)
    raise FileNotFoundError(f"No file with extensions {extensions} found in the directory.")

def find_file_with_suffix(directory, suffix):
    for root, _, files in os.walk(directory):
        for file in files:
            if file.endswith(suffix):
                return os.path.join(root, file)
    raise FileNotFoundError(f"No file ending with {suffix} found in the directory.")

def main():
    try:
        # Define the current directory
        current_dir = os.getcwd()

        # Automatically find the zip files
        nitm3_pw_zip_path = find_file_with_suffix(current_dir, '-PW.zip')
        nitm3_zip_path = find_file_with_extension(current_dir, '.zip')

        # Ensure we exclude the password zip file from being picked up as the main zip file
        if nitm3_pw_zip_path == nitm3_zip_path:
            nitm3_zip_path = find_file_with_extension(current_dir, '.zip', exclude_suffix='-PW.zip')

        # Confirm paths
        if not os.path.isfile(nitm3_zip_path):
            raise FileNotFoundError(f"Certificate zip file not found: {nitm3_zip_path}")
        if not os.path.isfile(nitm3_pw_zip_path):
            raise FileNotFoundError(f"Password zip file not found: {nitm3_pw_zip_path}")

        # Extract nitm3-pw.zip
        extract_zip(nitm3_pw_zip_path, current_dir)

        # Find the jpg file in the extracted directory
        jpg_file_path = find_file_with_extension(current_dir, ('.jpg', '.JPG'))
        print(f"Found JPG file: {jpg_file_path}")

        # Extract text from the jpg file
        password = extract_text_from_image(jpg_file_path)
        print(f"Extracted Password: {password}")

        # Extract nitm3.zip
        extract_zip(nitm3_zip_path, current_dir)

        # Find the pfx file in the extracted directory
        pfx_file_path = find_file_with_extension(current_dir, ('.pfx', '.PFX'))
        print(f"Found PFX file: {pfx_file_path}")

        # Define paths for the decoded files
        cert_out_path = os.path.join(current_dir, "certificate.pem")
        key_out_path = os.path.join(current_dir, "privatekey.pem")

        # Decode the pfx file using openssl
        pfx_decoded_path = os.path.join(current_dir, "decoded.pem")
        pfx_to_pem_cmd = [
            "openssl", "pkcs12", "-in", pfx_file_path,
            "-out", pfx_decoded_path, "-nodes",
            "-passin", f"pass:{password}"
        ]
        subprocess.run(pfx_to_pem_cmd, check=True)
        print(f"Decoded PFX file: {pfx_decoded_path}")

        # Separate the certificate and key from the decoded pem file
        with open(pfx_decoded_path, 'r') as f:
            lines = f.readlines()

        with open(cert_out_path, 'w') as cert_file, open(key_out_path, 'w') as key_file:
            cert_flag = False
            key_flag = False
            for line in lines:
                if "BEGIN CERTIFICATE" in line:
                    cert_flag = True
                if "END CERTIFICATE" in line:
                    cert_flag = False
                    cert_file.write(line)
                    continue
                if cert_flag:
                    cert_file.write(line)
                if "BEGIN PRIVATE KEY" in line:
                    key_flag = True
                if "END PRIVATE KEY" in line:
                    key_flag = False
                    key_file.write(line)
                    continue
                if key_flag:
                    key_file.write(line)

        print(f"Certificate and key have been decoded and saved to {current_dir}.")

    except Exception as e:
        print(f"An error occurred: {e}")

    finally:
        # Clean up the extracted files
        jpg_files = [f for f in os.listdir(current_dir) if f.lower().endswith('.jpg')]
        pfx_files = [f for f in os.listdir(current_dir) if f.lower().endswith('.pfx')]
        decoded_files = [f for f in os.listdir(current_dir) if f.lower().endswith('.pem')]

        for file in jpg_files + pfx_files + decoded_files:
            os.remove(os.path.join(current_dir, file))

if __name__ == "__main__":
    main()
